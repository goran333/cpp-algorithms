#include <vector>
#include <numeric>

class AverageNumber
{
public:
   AverageNumber(const std::vector<double>& inValues): _Values(inValues) {}
   AverageNumber(const AverageNumber& other)
   {
      if(*this != other) //check for self-assignment
      {
	 _Values.clear();
	 _Values = other.GetCollection();
      }
   }
   virtual ~AverageNumber() {}

   void Insert(const double& inValue)
   {
      _Values.push_back(inValue);
   }

   virtual double GetAverage() const
   {
      double sum = std::accumulate(_Values.begin(), _Values.end(), 0.0);
      return (sum/_Values.size());
   }

   void GetMinMax(double &Min, double &Max) const
   {
      Max = std::max_element(_Values.begin(), _Values.end());
      Min = std::min_element(_Values.begin(), _Values.end()); 
   }

   const std::vector<double>& GetCollection() const
   {
      return _Values;
   }

protected:
   std::vector<double> _Values;
};

class DerivedNumber : public AverageNumber
{
public:
   DerivedNumber(const std::vector<double>& inValues);
   virtual void GetAverage(double &Average) const;

private:

};
